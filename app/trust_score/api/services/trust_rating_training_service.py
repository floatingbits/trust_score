# services/teacher_rating_service.py
from trust_score.api.models import Review, TrustScore
from trust_score.api.services.prompt_generator import PromptGenerator
from trust_score.api.clients.gpt_client import GptClient
from django.db import transaction
from trust_score.api.domain.factories import TrainerFactory
from trust_score.api.domain.entities import TrustScore as TrustScoreEntity
from trust_score.api.domain.training_dataset_provider import DatasetConverter, ALGORITHM_KEY_DEFAULT_CATEGORIES
import json


class TrustRatingTrainingDataService:
    def __init__(self, prompt_generator: PromptGenerator, gpt_client: GptClient):
        self.prompt_generator = prompt_generator
        self.gpt_client = gpt_client

    def get_priority(self) -> int:
        match self.gpt_client.model:
            case "gpt-4.1":
                return 100
            case "gpt-4o-mini":
                return 30
            case _:
                return 0

    @transaction.atomic
    def generate_trust_rating_training(self, review_page_id: int):
        reviews = Review.objects.filter(review_page_id=review_page_id)
        prompt = self.prompt_generator.generate(reviews)
        result = self.gpt_client.run_prompt(prompt)
        trust_scores = json.loads(result)
        priority = self.get_priority()
        for trust_score_doc in trust_scores:
            TrustScore.objects.create(
                review_id=trust_score_doc.get("review_id"),
                result_json=trust_score_doc,
                # default_categories are the ones generated by llm or BERT,
                # others might be "name_mention" or "similarity"
                rating_algorithm_key=ALGORITHM_KEY_DEFAULT_CATEGORIES,
                rating_model_key=self.gpt_client.model,
                # default
                rating_model_priority=priority
            )
        return result


class TrustRatingTrainingService:
    def __init__(self):
        num_labels = 4
        self.trainer_factory = TrainerFactory(
            source_model_name="distilbert-base-german-cased",
            dest_model_name="./results_multi", num_labels=num_labels
        )

    def train_new_model(self, trust_scores: list[TrustScoreEntity]):
        tokenizer = self.trainer_factory.source_model_factory.create_tokenizer()
        dataset_converter = DatasetConverter(tokenizer=tokenizer)
        dataset = dataset_converter.convert_to_dataset(trust_scores)
        trainer = self.trainer_factory.create_trainer(dataset)
        trainer.train()
